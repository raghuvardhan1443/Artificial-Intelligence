import heapq
from copy import deepcopy

class PuzzleState:
    def __init__(self, board, moves=0, parent=None):
        self.board = board
        self.moves = moves
        self.parent = parent
        self.blank_pos = self.find_blank()
        self.f_score = self.moves + self.manhattan_distance()

    def find_blank(self):
        for i in range(3):
            for j in range(3):
                if self.board[i][j] == 0:
                    return (i, j)
        return None

    def manhattan_distance(self):
        distance = 0
        for i in range(3):
            for j in range(3):
                if self.board[i][j] != 0:
                    value = self.board[i][j]
                    target_row = (value - 1) // 3
                    target_col = (value - 1) % 3
                    distance += abs(i - target_row) + abs(j - target_col)
        return distance

    def get_neighbors(self):
        neighbors = []
        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]  # Up, Down, Left, Right
        row, col = self.blank_pos

        for dr, dc in directions:
            new_row, new_col = row + dr, col + dc
            if 0 <= new_row < 3 and 0 <= new_col < 3:
                new_board = deepcopy(self.board)
                new_board[row][col], new_board[new_row][new_col] = new_board[new_row][new_col], new_board[row][col]
                neighbors.append(PuzzleState(new_board, self.moves + 1, self))
        return neighbors

    def __lt__(self, other):
        return self.f_score < other.f_score

    def __eq__(self, other):
        return self.board == other.board

    def __hash__(self):
        return hash(str(self.board))

def is_solvable(board):
    flat_board = [num for row in board for num in row if num != 0]
    inversions = 0
    for i in range(len(flat_board)):
        for j in range(i + 1, len(flat_board)):
            if flat_board[i] > flat_board[j]:
                inversions += 1
    return inversions % 2 == 0

def solve_puzzle(initial_board):
    goal_board = [[1, 2, 3], [4, 5, 6], [7, 8, 0]]
    
    if not is_solvable(initial_board):
        return None, "Puzzle is not solvable"

    initial_state = PuzzleState(initial_board)
    goal_state = PuzzleState(goal_board)
    
    open_list = []
    heapq.heappush(open_list, initial_state)
    closed_set = set()

    while open_list:
        current_state = heapq.heappop(open_list)
        
        if current_state.board == goal_state.board:
            path = []
            while current_state:
                path.append(current_state.board)
                current_state = current_state.parent
            return path[::-1], None

        closed_set.add(str(current_state.board))

        for neighbor in current_state.get_neighbors():
            if str(neighbor.board) not in closed_set:
                heapq.heappush(open_list, neighbor)

    return None, "No solution found"

def print_board(board):
    for row in board:
        print(" ".join(str(num) for num in row))
    print()

def main():
    # Example initial board (0 represents the blank tile)
    initial_board = [
        [1, 2, 3],
        [4, 0, 5],
        [7, 8, 6]
    ]
    
    print("Initial board:")
    print_board(initial_board)
    
    solution, error = solve_puzzle(initial_board)
    
    if error:
        print(error)
    else:
        print("Solution found in", len(solution)-1, "moves:")
        for step, board in enumerate(solution):
            print(f"Step {step}:")
            print_board(board)

if __name__ == "__main__":
    main()
